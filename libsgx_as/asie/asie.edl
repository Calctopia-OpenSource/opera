/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


enclave {
    include "sgx_report.h"
    include "sgx_quote.h"
    from "sgx_tae_service.edl" import *;
    trusted {
        public uint32_t asie_create_issuer([size = sealed_blob_size, out] uint8_t *p_sealed_blob,
                                    uint32_t sealed_blob_size);
        public uint32_t asie_load_issuer([size = sealed_blob_size, in] const uint8_t *p_sealed_blob,
                                            uint32_t sealed_blob_size,
                                            [size = priv_rl_size, in] const uint8_t *p_priv_rl,
                                            size_t priv_rl_size,
                                            [size = sig_rl_size, in] const uint8_t *p_sig_rl,
                                            size_t sig_rl_size);
        public uint32_t asie_delete_issuer([size = sealed_blob_size, in] const uint8_t *p_sealed_blob,
                                    uint32_t sealed_blob_size);
        //public uint32_t asie_gen_grp_verif_cert(
        //                            [size = grp_verif_cert_size, out] uint8_t *p_grp_verif_cert,
        //                            uint32_t grp_verif_cert_size);
        public uint32_t asie_request_grp_verif_cert(
                                    [size = ts_size, in] const uint8_t *p_curr_ts,
                                    uint32_t ts_size,
                                    [in] sgx_target_info_t *p_target_info,
                                    [out] sgx_report_t *p_report,
                                    [size = 256, out] uint8_t *p_pseManifes);
        public uint32_t asie_produce_grp_verif_cert(
                                    [size = grp_verif_cert_size, out] uint8_t *p_grp_verif_cert,
                                    uint32_t grp_verif_cert_size,
                                    [size = ias_res_size, in] uint8_t *p_ias_res,
                                    uint32_t ias_res_size,
                                    [size = ias_sig_size, in] uint8_t *p_ias_sig,
                                    uint32_t ias_sig_size,
                                    [size = ias_crt_size, in] uint8_t *p_ias_crt,
                                    uint32_t ias_crt_size);

        public uint32_t asie_calc_rl_sizes([out] size_t *p_priv_rl_size,
                                            [out] size_t *p_sig_rl_size);
        public uint32_t asie_produce_rls([size = priv_rl_size, out] uint8_t *p_priv_rl,
                                            size_t priv_rl_size,
                                            [size = sig_rl_size, out] uint8_t *p_sig_rl,
                                            size_t sig_rl_size);
        //public uint32_t asie_update_grp_verif_cert(
        //                            [size = ts_size, in] const uint8_t *p_curr_ts,
        //                            uint32_t ts_size,
        //                            [in] sgx_target_info_t *p_qe_target_info,
        //                            [size = grp_verif_cert_size, out] uint8_t *p_grp_verif_cert,
        //                            uint32_t grp_verif_cert_size);

        public uint32_t asie_gen_nonce([size = nonce_size, out] uint8_t *p_nonce,
                                    uint32_t nonce_size);
        public uint32_t asie_certify_member([size = join_request_size, in] uint8_t *p_join_request,
                                    uint32_t join_request_size,
                                    [size = member_cred_size, out] uint8_t *p_member_cred,
                                    uint32_t member_cred_size,
                                    [size = ias_res_size, in] uint8_t *p_ias_res,
                                    uint32_t ias_res_size,
                                    [size = ias_sig_size, in] uint8_t *p_ias_sig,
                                    uint32_t ias_sig_size,
                                    [size = ias_crt_size, in] uint8_t *p_ias_crt,
                                    uint32_t ias_crt_size);
        public uint32_t asie_revoke_priv([size = sealed_blob_size, in, out] uint8_t *p_sealed_blob,
                                            uint32_t sealed_blob_size,
                                            [size = f_size, in] uint8_t *p_f,
                                            uint32_t f_size);
        public uint32_t asie_revoke_sig([size = sealed_blob_size, in, out] uint8_t *p_sealed_blob,
                                            uint32_t sealed_blob_size,
                                            [size = sig_size, in] uint8_t *p_sig,
                                            uint32_t sig_size);
    };

    untrusted {
        void ocall_print_string([in, string] const char *str);
        //void ocall_get_ias_report([in] sgx_report_t *p_report,
        //                        [user_check] uint8_t *p_ias_res,
        //                        [out] uint32_t *p_ias_res_size,
        //                        [user_check] uint8_t *p_ias_sig,
        //                        [out] uint32_t *p_ias_sig_size,
        //                        [user_check] uint8_t *p_ias_crt,
        //                        [out] uint32_t *p_ias_crt_size);
    };
};
